def inventory_mikrotik_system_health(info):
    if info:
        return [('', None)]
    else:
        return None

def check_mikrotik_system_health(item, _no_params, info):
    for voltage, temp, cputemp, powercons, current, cpufreq in info:
        perfdata = []
        summary = ''
        if voltage:
            perfdata.append(('voltage', (float(voltage) / 10)))
            summary += 'Voltage: %s V, ' % (float(voltage) / 10)
        if temp:
            perfdata.append(('temp', (float(temp) / 10)))
            summary += 'Temperature: %sC, ' % (float(temp) / 10)
        if cputemp:
            perfdata.append(('cputemp', (float(cputemp) / 10)))
            summary += 'CPU Temperature: %sC, ' % (float(cputemp) / 10)
        if powercons:
            perfdata.append(('power-consumption', (float(powercons) / 10)))
            summary += 'Power Consumption: %s W, ' % (float(powercons) / 10)
        if current:
            perfdata.append(('current', int(current)))
            summary += 'Current: %s mA, ' % int(current)
        if cpufreq:
            summary += 'CPU Frequency: %s MHz' % cpufreq

        if summary.endswith(', '):
            summary = summary[0:-2]

        return (0, summary, perfdata)
    return (3, 'Invalid data', [])

check_info['mikrotik_system_health'] = {
    'check_function':           check_mikrotik_system_health,
    'inventory_function':       inventory_mikrotik_system_health,
    'service_description':      'System health',
    'group':                    'mikrotik_system_health',
    'has_perfdata':             True
}

snmp_info['mikrotik_system_health'] = (
    '.1.3.6.1.4.1.14988.1.1.3', [
        '8.0',  # voltage
        '10.0', # temperature
        '11.0', # cpu-temperature
        '12.0', # power consumption
        '13.0', # current
        '14.0', # cpu frequency
    ]
)

snmp_scan_functions['mikrotik_system_health'] = \
    lambda oid: oid('.1.3.6.1.4.1.14988.1.1.3.*') != None
